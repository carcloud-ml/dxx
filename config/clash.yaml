#==========================================
启用：true#不使用系统 DNS
IPV6:true#开启 IPV6
听：0.0.0.0:53#dns监听
增强模式：伪ip
fake-ip-范围：198.18.0.1/16
- "*.lan"
#==========================================

- localhost.ptlogin2.qq.com: GIF、JPEG、JPG、MOV、MP4、PNG、SVG或WEBMdxx-+. srv.任天堂. net
socks-port: 附加文档需要对此存储库的写权限。配置- +.stun.playstation.net
redir-port: 再试一次在- +.msftconnecttest.com
mixed-port: 有主要的- +.msftncsi.com
allow-lan: GIF、JPEG、JPG、MOV、MP4、PNG、SVG或WEBM取消更改- +.xboxlive.com
bind-address: "*"我们不支持这种文件类型。提交更改。- msftconnecttest.com
- xbox.*.microsoft.com: 再试一次编辑使用
log-level: 有预演控制+换挡+m
ipv6: GIF、JPEG、JPG、MOV、MP4、PNG、SVG或WEBM使用GitHub副驾驶代码快55％切换
external-controller: 此文件为空。缩进模式:9090

#不使用系统 DNS
#不使用系统 DNS
  ipv6: 使用一个不空的文件。制表符然后
#IPV6开关：
-localhost. ptlogin2. qq. com:GIF、JPEG、JPG、MOV、MP4、PNG、SVG或 WEBMdxx-+。任天堂. net
socks-port:附加文档需要对此存储库的写权限.
  fake-ip-filter:
    - "*.lan"
redir-端口：再试一次在-+.msftconnecttest.com
混合端口：有主要的-+.msftncsi.com
混合端口：有主要的-+.msftncsi.com
allow-lan:GIF、JPEG、JPG、MOV、MP4、PNG、SVG或 WEBM mayoto-+.xboxlive.com
allow-lan:GIF、JPEG、JPG、MOV、MP4、PNG、SVG或 WEBM mayoto-+.xboxlive.com
bind-地址：“*”我们不支持这种文件类型 you you.-msftconnecttest. com
bind-地址：“*”我们不支持这种文件类型 you you.-msftconnecttest. com
-xbox.*.microsoft.com:再试一次编辑使用
    - "*.battlenet.com.cn"
    - "*.battlenet.com"
    - "*.blzstatic.cn"
    - "*.battle.net"
  nameserver:        # 默认 DNS 服务
    - 223.5.5.5
    - 119.29.29.29
  fallback:          # 国外 DNS 服务器
    - https://cloudflare-dns.com/dns-query
    - https://dns.google/dns-query
    - https://dns.alidns.com/dns-query
  fallback-filter:
    geoip: true
    geoip-code: CN
    ipcidr:
      - 240.0.0.0/4
#========= 建立锚点 =========#

# 策略组引用
pr:   &a3 {type: select,   proxies: [♻️ 自动选择, 🚀 手动切换, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇸🇬 狮城节点, DIRECT] }
p:    &a1 {type: http,     interval: 86400,  health-check: {enable: true, url: http://www.gstatic.com/generate_204, interval: 1800} }
auto: &a4 {type: url-test, lazy: true,  url: http://www.gstatic.com/generate_204, interval: 900, use: [Subscribe] }
use:  &a2 {type: select,   use: [Subscribe] }
c:    &a6 {type: http,     behavior: classical, interval: 86400}
d:    &a5 {type: http,     behavior: domain,    interval: 86400}
i:    &a7 {type: http,     behavior: ipcidr,    interval: 86400}

proxy-providers:
  Subscribe:
    <<: *a1
    url: https://api.nexconvert.com/sub?target=clash&url=https://pqjc.site/api/v1/client/subscribe?token=fa136d1a5a13b095a00c745ea6ce2a4e&flag=meta|https://api.ndsxfkjfvhzdsfio.quest/link/o0i226RuAr6qvMd7?clash=3&extend=1&emoji=true&list=true&new_name=true&udp=false
    # URL后面填写格式1[单一订阅]: 直接填写你的机场Clash订阅[推荐此种方式，避免订阅泄露]
    # URL后面填写格式2[多个订阅]：https://api.nexconvert.com/sub?target=clash&url=请手动填入你的订阅(多机场订阅用|分割即可)&emoji=true&list=true&new_name=true&udp=false
    path: ./proxy_providers/tmp.yaml
    
proxies: null
proxy-groups:
#分流分组
  - {name: 🚀 手动切换, <<: *a2}
  - {name: 🌏 全球加速, <<: *a3}
  - {name: 🍎 苹果服务, <<: *a3}
  - {name: 📺 哔哩哔哩, type: select, proxies: [DIRECT, 🇭🇰 香港节点, 🇨🇳 台湾节点]}
  - {name: 🤖 OpenAi,   type: select, proxies: [🇺🇲 美国节点]}
  - {name: 🎬 国际媒体, <<: *a3}
  - {name: 🌌 谷歌服务, <<: *a3}
  - {name: 📟 电报消息, <<: *a3}
  - {name: 🐦 推特服务, <<: *a3}
  - {name: 🎮 游戏平台, <<: *a3}
  - {name: 🆎 AdBlock, type: select, proxies: [REJECT]}
  - {name: 🐟 兜底分流, <<: *a3}
  
#节点分组
  - {name: ♻️ 自动选择, <<: *a4}
  - {name: 🇭🇰 香港节点, <<: *a4, filter: "港|HK|(?i)Hong"           }             # a4更改为a2，即为手动选择
  - {name: 🇨🇳 台湾节点, <<: *a4, filter: "台|湾|TW|(?i)Taiwan"      }             # a4更改为a2，即为手动选择
  - {name: 🇯🇵 日本节点, <<:  *a4, filter: "日|东京|JP|(?i)Japan"     }             # a4更改为a2，即为手动选择     
  - {name: 🇺🇲 美国节点, <<: *a4, filter: "美|US|(?i)States|American"}             # a4更改为a2，即为手动选择
  - {name: 🇸🇬 狮城节点, <<: *a4, filter: "新|坡|SG|(?i)Singapore"    }            # a4更改为a2，即为手动选择

# 分流规则 
rule-providers:
  Direct:      {<<: *a5, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Direct/Direct.yaml,                      path: ./ruleset/Direct.yaml       }
  Lan:         {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Lan/Lan.yaml,                            path: ./ruleset/Lan.yaml          }
  Download:    {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Download/Download.yaml,                  path: ./ruleset/Download.yaml     }
  Ad:          {<<: *a5, url: https://anti-ad.net/clash.yaml,                                                                                     path: ./ruleset/anti-ad-clash.yaml}
  OpenAi:      {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/OpenAI/OpenAI.yaml,                      path: ./ruleset/OpenAi.yaml       }
  BiliBili:    {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/BiliBili/BiliBili.yaml,                  path: ./ruleset/BiliBili.yaml     }
  Bahamut:     {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Bahamut/Bahamut.yaml,                    path: ./ruleset/Bahamut.yaml      } 
  GlobalMedia: {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/GlobalMedia/GlobalMedia_Classical.yaml,  path: ./ruleset/GlobalMedia.yaml  }
  Apple:       {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Apple/Apple_Classical.yaml,              path: ./ruleset/Apple.yaml        }
  Github:      {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/GitHub/GitHub.yaml,                      path: ./ruleset/Github.yaml       }
  Microsoft:   {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Microsoft/Microsoft.yaml,                path: ./ruleset/Microsoft.yaml    }
  Google:      {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Google/Google.yaml,                      path: ./ruleset/Google.yaml       }
  Telegram:    {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Telegram/Telegram.yaml,                  path: ./ruleset/Telegram.yaml     }
  Twitter:     {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Twitter/Twitter.yaml,                    path: ./ruleset/Twitter.yaml      }
  Game:        {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Game/Game.yaml,                          path: ./ruleset/Game.yaml         }
  ChinaIP:     {<<: *a7, url: https://cdn.jsdelivr.net/gh/soffchen/GeoIP2-CN@release/clash-rule-provider.yml,                                     path: ./ruleset/ChinaIP.yaml      }
  ProxyLite:   {<<: *a6, url: https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/ProxyLite/ProxyLite.yaml,                path: ./ruleset/ProxyLite.yaml    }
  
 # 分流Policy 
rules:
  - RULE-SET,Direct,DIRECT
  - RULE-SET,Lan,DIRECT
  - RULE-SET,Download,DIRECT
  - RULE-SET,Ad,🆎 AdBlock
  - RULE-SET,OpenAi,🤖 OpenAi
  - RULE-SET,BiliBili,📺 哔哩哔哩
  - RULE-SET,Bahamut,📺 哔哩哔哩
  - RULE-SET,GlobalMedia,🎬 国际媒体
  - RULE-SET,Apple,🍎 苹果服务
  - RULE-SET,Github,🌏 全球加速
  - RULE-SET,Microsoft, 🌏 全球加速
  - RULE-SET,Google,🌌 谷歌服务
  - RULE-SET,Telegram,📟 电报消息
  - RULE-SET,Twitter,🌏 全球加速
  - RULE-SET,Game,🎮 游戏平台
  - RULE-SET,ProxyLite,🌏 全球加速
  - RULE-SET,ChinaIP,DIRECT
  - GEOIP,CN,DIRECT
  - MATCH,🐟 兜底分流


# TUN模式是通过在操作系统上安装一个虚拟网卡来实现的，它可以接管所有的网络流量，并将流量转发至Clash，然后由Clash发出请求
# Windows 系统中如何启用TUN模式
# 1、运行 Clash , 确保使用规则模式，并可以联网
# 2、点击 General中的Service Mode右侧的Manage按钮，在弹出窗口中选择schtasks，安装服务模式。安装完成后，应用程序会自动重启，Service Mode右侧的地球图标变为绿色表示安装成功
# 3、点击 General中的TUN Mode右侧的开关以启动TUN模式
